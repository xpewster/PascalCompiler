Terminals unused in grammar

    MINUS
    DIVIDE
    EQ
    NE
    LT
    LE
    GE
    GT
    POINT
    AND
    OR
    NOT
    DIV
    MOD
    IN
    LBRACKET
    RBRACKET
    DOTDOT
    ARRAY
    CASE
    CONST
    FILEFILE
    FUNCTION
    GOTO
    LABEL
    NIL
    OF
    PACKED
    PROCEDURE
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WHILE
    WITH


State 67 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT

    2 idlist: IDENTIFIER COMMA idlist
    3       | IDENTIFIER

    4 vblock: VAR varspecs block
    5       | block

    6 varspecs: vargroup SEMICOLON varspecs
    7         | vargroup SEMICOLON

    8 vargroup: idlist COLON type

    9 type: simpletype

   10 simpletype: IDENTIFIER

   11 block: BEGINBEGIN statement endpart

   12 statement: BEGINBEGIN statement endpart
   13          | IF expr THEN statement endif
   14          | FOR assignment TO expr DO statement
   15          | FOR assignment DOWNTO expr DO statement
   16          | assignment
   17          | function

   18 endpart: SEMICOLON statement endpart
   19        | END

   20 endif: ELSE statement
   21      | %empty

   22 function: IDENTIFIER LPAREN arglist RPAREN

   23 arglist: expr COMMA arglist
   24        | expr

   25 assignment: variable ASSIGN expr

   26 expr: expr PLUS term
   27     | term

   28 term: term TIMES factor
   29     | factor

   30 factor: LPAREN expr RPAREN
   31       | variable
   32       | NUMBER
   33       | STRING

   34 variable: IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 1 2 3 10 22 34
    STRING (259) 33
    NUMBER (260) 32
    PLUS (261) 26
    MINUS (262)
    TIMES (263) 28
    DIVIDE (264)
    ASSIGN (265) 25
    EQ (266)
    NE (267)
    LT (268)
    LE (269)
    GE (270)
    GT (271)
    POINT (272)
    DOT (273) 1
    AND (274)
    OR (275)
    NOT (276)
    DIV (277)
    MOD (278)
    IN (279)
    COMMA (280) 2 23
    SEMICOLON (281) 1 6 7 18
    COLON (282) 8
    LPAREN (283) 1 22 30
    RPAREN (284) 1 22 30
    LBRACKET (285)
    RBRACKET (286)
    DOTDOT (287)
    ARRAY (288)
    BEGINBEGIN (289) 11 12
    CASE (290)
    CONST (291)
    DO (292) 14 15
    DOWNTO (293) 15
    ELSE (294) 20
    END (295) 19
    FILEFILE (296)
    FOR (297) 14 15
    FUNCTION (298)
    GOTO (299)
    IF (300) 13
    LABEL (301)
    NIL (302)
    OF (303)
    PACKED (304)
    PROCEDURE (305)
    PROGRAM (306) 1
    RECORD (307)
    REPEAT (308)
    SET (309)
    THEN (310) 13
    TO (311) 14
    TYPE (312)
    UNTIL (313)
    VAR (314) 4
    WHILE (315)
    WITH (316)


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    program (63)
        on left: 1
        on right: 0
    idlist (64)
        on left: 2 3
        on right: 1 2 8
    vblock (65)
        on left: 4 5
        on right: 1
    varspecs (66)
        on left: 6 7
        on right: 4 6
    vargroup (67)
        on left: 8
        on right: 6 7
    type (68)
        on left: 9
        on right: 8
    simpletype (69)
        on left: 10
        on right: 9
    block (70)
        on left: 11
        on right: 4 5
    statement (71)
        on left: 12 13 14 15 16 17
        on right: 11 12 13 14 15 18 20
    endpart (72)
        on left: 18 19
        on right: 11 12 18
    endif (73)
        on left: 20 21
        on right: 13
    function (74)
        on left: 22
        on right: 17
    arglist (75)
        on left: 23 24
        on right: 22 23
    assignment (76)
        on left: 25
        on right: 14 15 16
    expr (77)
        on left: 26 27
        on right: 13 14 15 23 24 25 26 30
    term (78)
        on left: 28 29
        on right: 26 27 28
    factor (79)
        on left: 30 31 32 33
        on right: 28 29
    variable (80)
        on left: 34
        on right: 25 31


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENTIFIER . LPAREN idlist RPAREN SEMICOLON vblock DOT

    LPAREN  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENTIFIER LPAREN . idlist RPAREN SEMICOLON vblock DOT

    IDENTIFIER  shift, and go to state 6

    idlist  go to state 7


State 6

    2 idlist: IDENTIFIER . COMMA idlist
    3       | IDENTIFIER .

    COMMA  shift, and go to state 8

    $default  reduce using rule 3 (idlist)


State 7

    1 program: PROGRAM IDENTIFIER LPAREN idlist . RPAREN SEMICOLON vblock DOT

    RPAREN  shift, and go to state 9


State 8

    2 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 6

    idlist  go to state 10


State 9

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN . SEMICOLON vblock DOT

    SEMICOLON  shift, and go to state 11


State 10

    2 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 2 (idlist)


State 11

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON . vblock DOT

    BEGINBEGIN  shift, and go to state 12
    VAR         shift, and go to state 13

    vblock  go to state 14
    block   go to state 15


State 12

   11 block: BEGINBEGIN . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 20
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 13

    4 vblock: VAR . varspecs block

    IDENTIFIER  shift, and go to state 6

    idlist    go to state 24
    varspecs  go to state 25
    vargroup  go to state 26


State 14

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock . DOT

    DOT  shift, and go to state 27


State 15

    5 vblock: block .

    $default  reduce using rule 5 (vblock)


State 16

   22 function: IDENTIFIER . LPAREN arglist RPAREN
   34 variable: IDENTIFIER .

    LPAREN  shift, and go to state 28

    $default  reduce using rule 34 (variable)


State 17

   12 statement: BEGINBEGIN . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 29
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 18

   14 statement: FOR . assignment TO expr DO statement
   15          | FOR . assignment DOWNTO expr DO statement

    IDENTIFIER  shift, and go to state 30

    assignment  go to state 31
    variable    go to state 23


State 19

   13 statement: IF . expr THEN statement endif

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 35
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 20

   11 block: BEGINBEGIN statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 41


State 21

   17 statement: function .

    $default  reduce using rule 17 (statement)


State 22

   16 statement: assignment .

    $default  reduce using rule 16 (statement)


State 23

   25 assignment: variable . ASSIGN expr

    ASSIGN  shift, and go to state 42


State 24

    8 vargroup: idlist . COLON type

    COLON  shift, and go to state 43


State 25

    4 vblock: VAR varspecs . block

    BEGINBEGIN  shift, and go to state 12

    block  go to state 44


State 26

    6 varspecs: vargroup . SEMICOLON varspecs
    7         | vargroup . SEMICOLON

    SEMICOLON  shift, and go to state 45


State 27

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT .

    $default  reduce using rule 1 (program)


State 28

   22 function: IDENTIFIER LPAREN . arglist RPAREN

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    arglist   go to state 46
    expr      go to state 47
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 29

   12 statement: BEGINBEGIN statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 48


State 30

   34 variable: IDENTIFIER .

    $default  reduce using rule 34 (variable)


State 31

   14 statement: FOR assignment . TO expr DO statement
   15          | FOR assignment . DOWNTO expr DO statement

    DOWNTO  shift, and go to state 49
    TO      shift, and go to state 50


State 32

   33 factor: STRING .

    $default  reduce using rule 33 (factor)


State 33

   32 factor: NUMBER .

    $default  reduce using rule 32 (factor)


State 34

   30 factor: LPAREN . expr RPAREN

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 51
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 35

   13 statement: IF expr . THEN statement endif
   26 expr: expr . PLUS term

    PLUS  shift, and go to state 52
    THEN  shift, and go to state 53


State 36

   27 expr: term .
   28 term: term . TIMES factor

    TIMES  shift, and go to state 54

    $default  reduce using rule 27 (expr)


State 37

   29 term: factor .

    $default  reduce using rule 29 (term)


State 38

   31 factor: variable .

    $default  reduce using rule 31 (factor)


State 39

   18 endpart: SEMICOLON . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 55
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 40

   19 endpart: END .

    $default  reduce using rule 19 (endpart)


State 41

   11 block: BEGINBEGIN statement endpart .

    $default  reduce using rule 11 (block)


State 42

   25 assignment: variable ASSIGN . expr

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 56
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 43

    8 vargroup: idlist COLON . type

    IDENTIFIER  shift, and go to state 57

    type        go to state 58
    simpletype  go to state 59


State 44

    4 vblock: VAR varspecs block .

    $default  reduce using rule 4 (vblock)


State 45

    6 varspecs: vargroup SEMICOLON . varspecs
    7         | vargroup SEMICOLON .

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 7 (varspecs)

    idlist    go to state 24
    varspecs  go to state 60
    vargroup  go to state 26


State 46

   22 function: IDENTIFIER LPAREN arglist . RPAREN

    RPAREN  shift, and go to state 61


State 47

   23 arglist: expr . COMMA arglist
   24        | expr .
   26 expr: expr . PLUS term

    PLUS   shift, and go to state 52
    COMMA  shift, and go to state 62

    $default  reduce using rule 24 (arglist)


State 48

   12 statement: BEGINBEGIN statement endpart .

    $default  reduce using rule 12 (statement)


State 49

   15 statement: FOR assignment DOWNTO . expr DO statement

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 63
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 50

   14 statement: FOR assignment TO . expr DO statement

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 64
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 51

   26 expr: expr . PLUS term
   30 factor: LPAREN expr . RPAREN

    PLUS    shift, and go to state 52
    RPAREN  shift, and go to state 65


State 52

   26 expr: expr PLUS . term

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    term      go to state 66
    factor    go to state 37
    variable  go to state 38


State 53

   13 statement: IF expr THEN . statement endif

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 67
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 54

   28 term: term TIMES . factor

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    factor    go to state 68
    variable  go to state 38


State 55

   18 endpart: SEMICOLON statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 69


State 56

   25 assignment: variable ASSIGN expr .
   26 expr: expr . PLUS term

    PLUS  shift, and go to state 52

    $default  reduce using rule 25 (assignment)


State 57

   10 simpletype: IDENTIFIER .

    $default  reduce using rule 10 (simpletype)


State 58

    8 vargroup: idlist COLON type .

    $default  reduce using rule 8 (vargroup)


State 59

    9 type: simpletype .

    $default  reduce using rule 9 (type)


State 60

    6 varspecs: vargroup SEMICOLON varspecs .

    $default  reduce using rule 6 (varspecs)


State 61

   22 function: IDENTIFIER LPAREN arglist RPAREN .

    $default  reduce using rule 22 (function)


State 62

   23 arglist: expr COMMA . arglist

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    arglist   go to state 70
    expr      go to state 47
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 63

   15 statement: FOR assignment DOWNTO expr . DO statement
   26 expr: expr . PLUS term

    PLUS  shift, and go to state 52
    DO    shift, and go to state 71


State 64

   14 statement: FOR assignment TO expr . DO statement
   26 expr: expr . PLUS term

    PLUS  shift, and go to state 52
    DO    shift, and go to state 72


State 65

   30 factor: LPAREN expr RPAREN .

    $default  reduce using rule 30 (factor)


State 66

   26 expr: expr PLUS term .
   28 term: term . TIMES factor

    TIMES  shift, and go to state 54

    $default  reduce using rule 26 (expr)


State 67

   13 statement: IF expr THEN statement . endif

    ELSE  shift, and go to state 73

    ELSE      [reduce using rule 21 (endif)]
    $default  reduce using rule 21 (endif)

    endif  go to state 74


State 68

   28 term: term TIMES factor .

    $default  reduce using rule 28 (term)


State 69

   18 endpart: SEMICOLON statement endpart .

    $default  reduce using rule 18 (endpart)


State 70

   23 arglist: expr COMMA arglist .

    $default  reduce using rule 23 (arglist)


State 71

   15 statement: FOR assignment DOWNTO expr DO . statement

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 75
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 72

   14 statement: FOR assignment TO expr DO . statement

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 76
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 73

   20 endif: ELSE . statement

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement   go to state 77
    function    go to state 21
    assignment  go to state 22
    variable    go to state 23


State 74

   13 statement: IF expr THEN statement endif .

    $default  reduce using rule 13 (statement)


State 75

   15 statement: FOR assignment DOWNTO expr DO statement .

    $default  reduce using rule 15 (statement)


State 76

   14 statement: FOR assignment TO expr DO statement .

    $default  reduce using rule 14 (statement)


State 77

   20 endif: ELSE statement .

    $default  reduce using rule 20 (endif)
